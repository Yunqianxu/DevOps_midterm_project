# Service: This manifest exposes the Django application to the internet or within the cluster.
# A LoadBalancer service type makes it accessible over the internet when running on supported cloud providers.
apiVersion: v1
kind: Service
metadata:
  name: django-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
  selector:
    app: django-app
    tier: frontend
---
# Deployment: This manifest defines how the Django application pods are created and managed. 
#It specifies the Docker image to use, the number of replicas, and configuration details like environment variables.
#PersistentVolumeClaim (PVC): Requests storage from the cluster to persist the MySQL database data.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: django-pv-claim
  labels:
    app: django-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-app
  labels:
    app: django-app
spec:
  selector:
    matchLabels:
      app: django-app
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: django-app
        tier: frontend
    spec:
      containers:
      - name: django-app
        image: alexun/django-app:latest #~~~
        ports:
        - containerPort: 8000
          name: django-app
        env:
          - name: DATABASE_HOST
            value: django-mysql
          - name: DATABASE_USER
            value: django-mysql
          - name: DATABASE_PASSWORD
            value: yunqian123
          - name: DATABASE_NAME
            value: django-app
        volumeMounts:
        - name: django-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: django-persistent-storage
        persistentVolumeClaim:
          claimName: django-pv-claim

